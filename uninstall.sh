#!/bin/bash
# Script de d√©sinstallation pour Rocky Converter Web
# Nettoie proprement tous les √©l√©ments install√©s

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKUP_DIR="$HOME/rocky_converter_backup_$(date +%Y%m%d_%H%M%S)"
FORCE_REMOVE=false
KEEP_DATA=false
REMOVE_VENV=true

# Fonction d'aide
show_help() {
    echo -e "${BLUE}üóëÔ∏è  D√©sinstallation de Rocky Converter Web${NC}"
    echo "=============================================="
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -f, --force             Forcer la suppression sans confirmation"
    echo "  -k, --keep-data         Garder les donn√©es utilisateur (base de donn√©es, m√©dias)"
    echo "  --no-venv              Ne pas supprimer l'environnement virtuel"
    echo "  -h, --help              Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0                      # D√©sinstallation interactive"
    echo "  $0 --force              # D√©sinstallation forc√©e"
    echo "  $0 --keep-data          # Garder les donn√©es utilisateur"
    echo "  $0 -f -k                # Forc√© + garder les donn√©es"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: Cette action est irr√©versible !${NC}"
    echo ""
    exit 0
}

# Parser les arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--force)
            FORCE_REMOVE=true
            shift
            ;;
        -k|--keep-data)
            KEEP_DATA=true
            shift
            ;;
        --no-venv)
            REMOVE_VENV=false
            shift
            ;;
        -h|--help)
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Option inconnue: $1${NC}"
            echo "Utilisez -h ou --help pour voir l'aide"
            exit 1
            ;;
    esac
done

# Fonction de confirmation
confirm_action() {
    if [[ "$FORCE_REMOVE" == true ]]; then
        return 0
    fi
    
    local message="$1"
    echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
    read -p "Continuer ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}‚ÑπÔ∏è  Op√©ration annul√©e${NC}"
        exit 0
    fi
}

# Fonction de sauvegarde
create_backup() {
    echo -e "${BLUE}üì¶ Cr√©ation d'une sauvegarde...${NC}"
    mkdir -p "$BACKUP_DIR"
    
    # Sauvegarder la configuration
    if [ -f ".env" ]; then
        cp ".env" "$BACKUP_DIR/"
        echo -e "${GREEN}‚úÖ Configuration (.env) sauvegard√©e${NC}"
    fi
    
    # Sauvegarder la base de donn√©es
    if [ -f "db.sqlite3" ]; then
        cp "db.sqlite3" "$BACKUP_DIR/"
        echo -e "${GREEN}‚úÖ Base de donn√©es sauvegard√©e${NC}"
    fi
    
    # Sauvegarder les m√©dias si ils existent et sont petits
    if [ -d "media/albums" ] && [ "$(du -s media/albums 2>/dev/null | cut -f1)" -lt 102400 ]; then
        cp -r "media/albums" "$BACKUP_DIR/" 2>/dev/null || true
        echo -e "${GREEN}‚úÖ M√©dias sauvegard√©s (< 100MB)${NC}"
    elif [ -d "media/albums" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Dossier m√©dia trop volumineux pour la sauvegarde${NC}"
        echo -e "${YELLOW}   Sauvegardez manuellement: media/albums/${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e dans: $BACKUP_DIR${NC}"
}

# Fonction pour arr√™ter les services
stop_services() {
    echo -e "${BLUE}üõë Arr√™t des services...${NC}"
    
    # Arr√™ter le service systemd si il existe
    if systemctl is-active --quiet rockyconverter 2>/dev/null; then
        echo "Arr√™t du service rockyconverter..."
        sudo systemctl stop rockyconverter
        sudo systemctl disable rockyconverter
        echo -e "${GREEN}‚úÖ Service rockyconverter arr√™t√©${NC}"
    fi
    
    # Arr√™ter les processus Django en cours
    pkill -f "manage.py runserver" 2>/dev/null || true
    pkill -f "gunicorn.*rockyconverter" 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Processus Django arr√™t√©s${NC}"
}

# Fonction pour supprimer les t√¢ches cron
remove_cron_jobs() {
    echo -e "${BLUE}‚è∞ Suppression des t√¢ches cron...${NC}"
    
    # Cr√©er une copie du crontab sans nos t√¢ches
    crontab -l 2>/dev/null | grep -v "cleanup_cron.sh\|rocky_converter" > /tmp/new_crontab || true
    
    # V√©rifier s'il y a des changements
    if ! crontab -l 2>/dev/null | diff - /tmp/new_crontab >/dev/null 2>&1; then
        crontab /tmp/new_crontab
        echo -e "${GREEN}‚úÖ T√¢ches cron supprim√©es${NC}"
    else
        echo -e "${GREEN}‚úÖ Aucune t√¢che cron √† supprimer${NC}"
    fi
    
    rm -f /tmp/new_crontab
}

# Fonction pour supprimer les fichiers syst√®me
remove_system_files() {
    echo -e "${BLUE}üóÇÔ∏è  Suppression des fichiers syst√®me...${NC}"
    
    # Supprimer le fichier de service systemd
    if [ -f "/etc/systemd/system/rockyconverter.service" ]; then
        sudo rm -f "/etc/systemd/system/rockyconverter.service"
        sudo systemctl daemon-reload
        echo -e "${GREEN}‚úÖ Fichier de service supprim√©${NC}"
    fi
    
    # Supprimer les logs syst√®me
    sudo rm -f /var/log/rocky_converter*.log 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Logs syst√®me supprim√©s${NC}"
}

# Fonction pour supprimer l'environnement virtuel
remove_virtual_env() {
    if [[ "$REMOVE_VENV" == true ]] && [ -d "venv" ]; then
        echo -e "${BLUE}üêç Suppression de l'environnement virtuel...${NC}"
        rm -rf venv/
        echo -e "${GREEN}‚úÖ Environnement virtuel supprim√©${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  Environnement virtuel conserv√©${NC}"
    fi
}

# Fonction pour supprimer les donn√©es
remove_data() {
    if [[ "$KEEP_DATA" == true ]]; then
        echo -e "${BLUE}‚ÑπÔ∏è  Donn√©es utilisateur conserv√©es${NC}"
        return 0
    fi
    
    echo -e "${BLUE}üóÑÔ∏è  Suppression des donn√©es...${NC}"
    
    # Supprimer la base de donn√©es
    if [ -f "db.sqlite3" ]; then
        rm -f db.sqlite3
        echo -e "${GREEN}‚úÖ Base de donn√©es supprim√©e${NC}"
    fi
    
    # Supprimer les m√©dias
    if [ -d "media/albums" ]; then
        rm -rf media/albums/*
        echo -e "${GREEN}‚úÖ Fichiers m√©dia supprim√©s${NC}"
    fi
    
    # Supprimer les logs locaux
    rm -f ~/rocky_converter*.log 2>/dev/null || true
    if [ -d "logs" ]; then
        rm -rf logs/
        echo -e "${GREEN}‚úÖ Logs locaux supprim√©s${NC}"
    fi
}

# Fonction pour supprimer les fichiers de configuration
remove_config() {
    echo -e "${BLUE}‚öôÔ∏è  Suppression de la configuration...${NC}"
    
    # Supprimer le fichier .env
    if [ -f ".env" ]; then
        rm -f .env
        echo -e "${GREEN}‚úÖ Fichier .env supprim√©${NC}"
    fi
    
    # Supprimer les fichiers de cache Python
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    find . -name "*.pyc" -delete 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Cache Python nettoy√©${NC}"
}

# Fonction pour nettoyer les fichiers temporaires
cleanup_temp_files() {
    echo -e "${BLUE}üßπ Nettoyage des fichiers temporaires...${NC}"
    
    # Supprimer les fichiers temporaires
    rm -rf /tmp/rocky_converter_* 2>/dev/null || true
    rm -rf /tmp/django_* 2>/dev/null || true
    
    # Supprimer les fichiers de sauvegarde
    rm -f *.backup *.bak *.old 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Fichiers temporaires supprim√©s${NC}"
}

# Fonction principale
main() {
    cd "$SCRIPT_DIR"
    
    echo -e "${BLUE}üóëÔ∏è  Rocky Converter Web - D√©sinstallation${NC}"
    echo "=============================================="
    echo ""
    
    # Afficher les param√®tres
    echo -e "${BLUE}Param√®tres de d√©sinstallation:${NC}"
    echo "  - Forcer: $FORCE_REMOVE"
    echo "  - Garder les donn√©es: $KEEP_DATA"
    echo "  - Supprimer venv: $REMOVE_VENV"
    echo "  - Sauvegarde: $BACKUP_DIR"
    echo ""
    
    # Confirmation finale
    confirm_action "Voulez-vous vraiment d√©sinstaller Rocky Converter Web ?"
    
    # Cr√©er une sauvegarde
    create_backup
    
    # Arr√™ter les services
    stop_services
    
    # Supprimer les t√¢ches cron
    remove_cron_jobs
    
    # Supprimer les fichiers syst√®me (n√©cessite sudo)
    if command -v sudo >/dev/null 2>&1; then
        remove_system_files
    else
        echo -e "${YELLOW}‚ö†Ô∏è  sudo non disponible, ignor√© les fichiers syst√®me${NC}"
    fi
    
    # Supprimer les donn√©es
    remove_data
    
    # Supprimer la configuration
    remove_config
    
    # Supprimer l'environnement virtuel
    remove_virtual_env
    
    # Nettoyer les fichiers temporaires
    cleanup_temp_files
    
    echo ""
    echo -e "${GREEN}üéâ D√©sinstallation termin√©e avec succ√®s !${NC}"
    echo ""
    echo -e "${BLUE}üì¶ Sauvegarde disponible dans:${NC}"
    echo "   $BACKUP_DIR"
    echo ""
    
    if [[ "$KEEP_DATA" == true ]]; then
        echo -e "${YELLOW}‚ÑπÔ∏è  Les donn√©es utilisateur ont √©t√© conserv√©es${NC}"
        echo ""
    fi
    
    echo -e "${BLUE}Pour supprimer compl√®tement le dossier du projet:${NC}"
    echo "   rm -rf $SCRIPT_DIR"
    echo ""
    echo -e "${BLUE}Merci d'avoir utilis√© Rocky Converter Web ! üëã${NC}"
}

# V√©rifier qu'on est dans le bon dossier
if [ ! -f "manage.py" ] || [ ! -f "install.sh" ]; then
    echo -e "${RED}‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le dossier Rocky Converter Web${NC}"
    echo "   Dossier actuel: $(pwd)"
    echo "   Fichiers requis: manage.py, install.sh"
    exit 1
fi

# Lancer la d√©sinstallation
main "$@"
