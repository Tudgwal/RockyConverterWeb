#!/usr/bin/env python3
"""
Script de v√©rification des d√©pendances pour Rocky Converter Web
V√©rifie que toutes les d√©pendances n√©cessaires sont install√©es et fonctionnelles
"""

import sys
import subprocess

def check_dependency(module_name, import_name=None, description=""):
    """V√©rifie qu'une d√©pendance est install√©e et importable"""
    if import_name is None:
        import_name = module_name
    
    try:
        __import__(import_name)
        print(f"‚úÖ {module_name} - {description}")
        return True
    except ImportError:
        print(f"‚ùå {module_name} - {description} (MANQUANT)")
        return False

def check_external_command(command, description=""):
    """V√©rifie qu'une commande externe est disponible"""
    try:
        subprocess.run([command, '--version'], 
                      capture_output=True, check=True)
        print(f"‚úÖ {command} - {description}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print(f"‚ùå {command} - {description} (MANQUANT)")
        return False

def main():
    print("üîç V√©rification des d√©pendances Rocky Converter Web")
    print("=" * 50)
    
    all_ok = True
    
    # D√©pendances Python obligatoires
    print("\nüì¶ D√©pendances Python obligatoires:")
    deps = [
        ("django", "django", "Framework web Django"),
        ("python-dotenv", "dotenv", "Gestion des variables d'environnement"),
        ("django-cache-memoize", "cache_memoize", "Utilitaires de cache Django"),
    ]
    
    for module, import_name, desc in deps:
        if not check_dependency(module, import_name, desc):
            all_ok = False
    
    # Modules de la biblioth√®que standard utilis√©s
    print("\nüêç Modules Python standard utilis√©s:")
    stdlib_modules = [
        ("os", "os", "Op√©rations syst√®me"),
        ("zipfile", "zipfile", "Gestion des archives ZIP"),
        ("tarfile", "tarfile", "Gestion des archives TAR"),
        ("subprocess", "subprocess", "Ex√©cution de commandes externes"),
        ("tempfile", "tempfile", "Fichiers temporaires"),
        ("urllib.parse", "urllib.parse", "Parsing d'URLs"),
    ]
    
    for module, import_name, desc in stdlib_modules:
        check_dependency(module, import_name, desc)
    
    # Commandes externes
    print("\nüîß Commandes externes requises:")
    commands = [
        ("convert", "ImageMagick (conversion d'images)"),
        ("python3", "Interpr√©teur Python 3"),
    ]
    
    for command, desc in commands:
        if not check_external_command(command, desc):
            all_ok = False
    
    # D√©pendances optionnelles pour la production
    print("\nüöÄ D√©pendances de production (optionnelles):")
    prod_deps = [
        ("gunicorn", "gunicorn", "Serveur WSGI"),
        ("psycopg2", "psycopg2", "Driver PostgreSQL"),
        ("mysqlclient", "MySQLdb", "Driver MySQL"),
    ]
    
    for module, import_name, desc in prod_deps:
        check_dependency(module, import_name, desc)
    
    print("\n" + "=" * 50)
    if all_ok:
        print("üéâ Toutes les d√©pendances obligatoires sont install√©es !")
        print("‚úÖ Le projet devrait fonctionner correctement.")
    else:
        print("‚ö†Ô∏è  Certaines d√©pendances obligatoires sont manquantes.")
        print("üì¶ Installez-les avec: pip install -r requirements.txt")
        if "convert" in [cmd for cmd, _ in commands]:
            print("üñºÔ∏è  ImageMagick: sudo apt install imagemagick")
    
    return 0 if all_ok else 1

if __name__ == "__main__":
    sys.exit(main())
